Online Judge Platform

Project Description
The Online Judge platform is a comprehensive web application designed to facilitate coding challenges, competitions, and practice sessions for aspiring programmers. It aims to provide a secure, user-friendly environment for both administrators and students to manage and participate in coding activities. The platform leverages the MERN (MongoDB, Express.js, React.js, Node.js) stack for its development, incorporates DevOps practices for containerization, and utilizes AWS for deployment.

System Architecture
The Online Judge platform follows a client-server architecture, consisting of three main components: the frontend, the backend, and the database.

Frontend
The frontend is built using React.js, a popular JavaScript library for building user interfaces. It provides a responsive, interactive UI for users to navigate, view problems, submit solutions, and view results. The front end communicates with the back end through RESTful API calls.

1 - Problem Dashboard: Displaying a list of coding problems across various categories and difficulty levels.
2 - Contest Arena: Providing a platform for hosting coding contests, joining contests, and viewing live leaderboards.
3 - Code Editor: Offering a code editor with syntax highlighting, auto-completion, and indentation support.
4 - Submission History: Tracking the history of code submissions, including status, runtime, and memory usage.
5 - User Profile: Allowing users to manage their profile, track progress, and view achievements.

To develop the front end, OnlineJudge utilizes ReactJS along with Redux for state management, ensuring a responsive and efficient user interface. Additionally, CSS frameworks like Tailwind CSS and Material UI are employed for styling and layout consistency.

Backend
The backend is developed using Node.js and Express.js, providing RESTful APIs for frontend interactions. It handles user authentication, problem management, submission handling, and verdict generation. The backend communicates with the database for data retrieval and storage.

1 - User Service: Manages user authentication, registration, and profile management.
2 - Problem Service: Handles the storage and retrieval of coding problems, including descriptions, input/output specifications, and test cases.
3 - Contest Service: Manages coding contests, including contest creation, participant registration, and leaderboard updates.
4 - Submission Service: Handles user submissions, evaluates code against test cases, and provides feedback to participants.
5 - Analytics Service: Collects and analyzes performance data, generates reports, and provides insights to users.

API Gateway

OnlineJudge follows a RESTful API design, with each route exposing well-defined endpoints for client interaction. Sample API endpoints and functionalities include:

1 - /api/auth/signup: Create a new user account.
2 - /api/auth/login: Authenticate user credentials and generate an access token.
3 - /api/problems: Get a list of coding problems.
4 - /api/contests: Get a list of active contests.
5 - /api/submissions: Submit code for evaluation.
Sample API requests and responses adhere to JSON format and standard HTTP methods, ensuring interoperability and ease of integration with client applications.

Database
MongoDB is used as the primary database for the platform, providing a flexible and scalable solution for storing problem details, test cases, user information, and submissions.

Docker Containerization
Docker is employed for containerization, ensuring isolation and security for executing user-submitted code. Each submission is run within a Docker container, providing a sandboxed environment to prevent unauthorized access and potential harm to the system.

AWS Deployment
The platform is deployed on AWS using services like Elastic Beanstalk or ECS for containerized applications. AWS provides scalability, reliability, and security for hosting the Online Judge platform.

Features
1 - Authentication and Authorization: Users can sign up and log in securely, with different roles assigned (admin, student) for access control.
2 - Problem Management: Admins can add, edit, and delete problems, including problem statements, sample test cases, and expected outputs.
3 - Submission Handling: Students can submit their solutions, which are compiled and executed in a sandboxed environment. Verdicts are generated based on comparison with expected outputs.
4 - UI Components: The frontend includes various components such as problem lists, problem details, submission forms, and result displays, providing a seamless user experience.
5 - Security Measures: Test cases are protected, unauthorized code tampering is prevented, and network calls are restricted during contests. Docker containers ensure isolation and security for executing code submissions.
6 - Deployment :The platform will be deployed on AWS using Docker containers for scalability and security. Continuous integration and deployment (CI/CD) pipelines will be set up to automate the deployment process, ensuring efficiency and reliability.

Timeline (Target to complete before 8th June)
Frontend Development: 7 days
Backend Development: 8 days
Database Setup: 3 days
Docker Configuration: 2 days
Integration and Testing: 3 days

Future Enhancements
1 - Contest Management: Implement features for organizing and managing coding contests with time limits and scoreboard.
2 - Code Editor Integration: Integrate code editors with syntax highlighting and auto-completion for a better coding experience.
3 - Real-time Updates: Implement real-time updates for submission status and leaderboard rankings using WebSockets.
4 - Analytics and Insights: Provide analytics and insights for administrators to track user activity, submission trends, and performance metrics.